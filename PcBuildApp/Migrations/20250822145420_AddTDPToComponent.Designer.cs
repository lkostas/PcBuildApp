// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PcBuildApp.Data;

#nullable disable

namespace PcBuildApp.Migrations
{
    [DbContext(typeof(PcBuildAppDbContext))]
    [Migration("20250822145420_AddTDPToComponent")]
    partial class AddTDPToComponent
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PcBuildApp.Data.Build", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("InsertedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<decimal>("TotalPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("TotalWattage")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "IX_Builds_Name");

                    b.HasIndex(new[] { "UserId" }, "IX_Builds_UserId");

                    b.ToTable("Builds", (string)null);
                });

            modelBuilder.Entity("PcBuildApp.Data.BuildComponent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BuildId")
                        .HasColumnType("integer");

                    b.Property<int>("ComponentId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("InsertedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<decimal>("PriceAtTime")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "BuildId" }, "IX_BuildComponents_BuildId");

                    b.HasIndex(new[] { "ComponentId" }, "IX_BuildComponents_ComponentId");

                    b.ToTable("BuildComponents", (string)null);
                });

            modelBuilder.Entity("PcBuildApp.Data.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ComponentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("InsertedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "IX_Categories_Name")
                        .IsUnique();

                    b.ToTable("Categories", (string)null);
                });

            modelBuilder.Entity("PcBuildApp.Data.Component", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("InsertedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInStock")
                        .HasColumnType("boolean");

                    b.Property<int>("ManufacturerId")
                        .HasColumnType("integer");

                    b.Property<string>("Model")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("integer");

                    b.Property<int?>("TDP")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CategoryId" }, "IX_Components_CategoryId");

                    b.HasIndex(new[] { "ManufacturerId" }, "IX_Components_ManufacturerId");

                    b.HasIndex(new[] { "Name" }, "IX_Components_Name");

                    b.ToTable("Components", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Description = "16-core (8 P-cores + 8 E-cores) desktop processor with up to 5.4 GHz boost clock. Excellent for gaming and content creation.",
                            InsertedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            IsInStock = true,
                            ManufacturerId = 1,
                            Model = "i7-13700K",
                            Name = "Intel Core i7-13700K",
                            Price = 419.99m,
                            StockQuantity = 25
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Description = "8-core, 16-thread processor with 5.4 GHz boost clock. Built on advanced 5nm process technology.",
                            InsertedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            IsInStock = true,
                            ManufacturerId = 2,
                            Model = "7700X",
                            Name = "AMD Ryzen 7 7700X",
                            Price = 349.99m,
                            StockQuantity = 18
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            Description = "High-performance graphics card with 12GB GDDR6X memory. Perfect for 1440p gaming with ray tracing.",
                            InsertedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            IsInStock = true,
                            ManufacturerId = 3,
                            Model = "RTX 4070",
                            Name = "NVIDIA GeForce RTX 4070",
                            Price = 599.99m,
                            StockQuantity = 12
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            Description = "16GB GDDR6 graphics card delivering excellent 1440p performance with advanced RDNA 3 architecture.",
                            InsertedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            IsInStock = false,
                            ManufacturerId = 2,
                            Model = "RX 7800 XT",
                            Name = "AMD Radeon RX 7800 XT",
                            Price = 499.99m,
                            StockQuantity = 0
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 3,
                            Description = "32GB (2x16GB) DDR4-3200 memory kit with dynamic RGB lighting. Optimized for Intel and AMD platforms.",
                            InsertedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            IsInStock = true,
                            ManufacturerId = 4,
                            Model = "CMW32GX4M2E3200C16",
                            Name = "Corsair Vengeance RGB Pro 32GB",
                            Price = 129.99m,
                            StockQuantity = 45
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 3,
                            Description = "16GB (2x8GB) DDR4-3200 memory with low-profile design. Great for compact builds.",
                            InsertedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            IsInStock = true,
                            ManufacturerId = 4,
                            Model = "CMK16GX4M2B3200C16",
                            Name = "Corsair Vengeance LPX 16GB",
                            Price = 59.99m,
                            StockQuantity = 67
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 4,
                            Description = "2TB NVMe M.2 SSD with read speeds up to 7,000 MB/s. Perfect for gaming and professional workloads.",
                            InsertedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            IsInStock = true,
                            ManufacturerId = 1,
                            Model = "MZ-V8P2T0B/AM",
                            Name = "Samsung 980 PRO 2TB",
                            Price = 199.99m,
                            StockQuantity = 33
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 4,
                            Description = "1TB NVMe SSD designed for gaming with speeds up to 7,300 MB/s and optimized for DirectStorage.",
                            InsertedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            IsInStock = true,
                            ManufacturerId = 2,
                            Model = "WDS100T2X0E",
                            Name = "WD Black SN850X 1TB",
                            Price = 89.99m,
                            StockQuantity = 28
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 5,
                            Description = "850W 80+ Gold fully modular power supply with Zero RPM fan mode for silent operation.",
                            InsertedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            IsInStock = true,
                            ManufacturerId = 4,
                            Model = "CP-9020200-NA",
                            Name = "Corsair RM850x",
                            Price = 139.99m,
                            StockQuantity = 19
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 5,
                            Description = "650W 80+ Bronze power supply offering reliable performance for mainstream gaming builds.",
                            InsertedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            IsInStock = true,
                            ManufacturerId = 4,
                            Model = "CP-9020236-NA",
                            Name = "Corsair CV650",
                            Price = 69.99m,
                            StockQuantity = 41
                        });
                });

            modelBuilder.Entity("PcBuildApp.Data.ComponentSpecs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("BaseClock")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal?>("BoostClock")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<int?>("Capacity")
                        .HasColumnType("integer");

                    b.Property<string>("Chipset")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("ComponentId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("CoreClock")
                        .HasPrecision(8, 2)
                        .HasColumnType("decimal(8,2)");

                    b.Property<int?>("Cores")
                        .HasColumnType("integer");

                    b.Property<string>("EfficiencyRating")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int?>("IOPS")
                        .HasColumnType("integer");

                    b.Property<DateTime>("InsertedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Latency")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int?>("MaxRAM")
                        .HasColumnType("integer");

                    b.Property<decimal?>("MemoryBandwidth")
                        .HasPrecision(8, 2)
                        .HasColumnType("decimal(8,2)");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int?>("RAMSlots")
                        .HasColumnType("integer");

                    b.Property<int?>("ReadSpeed")
                        .HasColumnType("integer");

                    b.Property<string>("Socket")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("Speed")
                        .HasColumnType("integer");

                    b.Property<int?>("StorageCapacity")
                        .HasColumnType("integer");

                    b.Property<int?>("TDP")
                        .HasColumnType("integer");

                    b.Property<int?>("Threads")
                        .HasColumnType("integer");

                    b.Property<int?>("VRAM")
                        .HasColumnType("integer");

                    b.Property<int?>("Wattage")
                        .HasColumnType("integer");

                    b.Property<int?>("WriteSpeed")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ComponentId" }, "IX_ComponentSpecs_ComponentId")
                        .IsUnique();

                    b.ToTable("ComponentSpecs", (string)null);
                });

            modelBuilder.Entity("PcBuildApp.Data.Manufacturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("InsertedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LogoUrl")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Website")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "IX_Manufacturers_Name")
                        .IsUnique();

                    b.ToTable("Manufacturers", (string)null);
                });

            modelBuilder.Entity("PcBuildApp.Data.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("InsertedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("UserRole")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Email" }, "IX_Users_Email")
                        .IsUnique();

                    b.HasIndex(new[] { "UserName" }, "IX_Users_UserName")
                        .IsUnique();

                    b.ToTable("Users", (string)null);
                });
#pragma warning restore 612, 618
        }
    }
}
